apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-config
  namespace: jenkins
data:
  compose-pipeline.dsl: |
    pipelineJob('compose-pipeline') {
        parameters {
          stringParam('CLONE', '', 'Url of a git repository for cloning (https)')
          stringParam('COMPOSE_PATH', 'undefined', 'Path to the docker-compose file')
          stringParam('NAME', 'docker-compose.yml', 'Name of the docker-compose file')
          stringParam('ID', '', 'Grakn database ID')
          stringParam('RID', '', 'GitHub sha of docker-compose file')
          stringParam('BASE_URL', '', 'URL of the proxy service')
        }

        logRotator {
          numToKeep(100)
        }

        definition {
            cps {
                script('''
    pipeline {
      agent {
        kubernetes {
          cloud 'kubernetes'
          defaultContainer 'docker'
          yaml """
    kind: Pod
    spec:
      containers:
        - name: docker
          image: docker:19.03.12-dind
          args:
            - --storage-driver=overlay2
          securityContext:
            privileged: true
        - name: conftest
          image: instrumenta/conftest:v0.21.0
          tty: true
          command: ['cat']
            """
          }
        }

        options {
          timeout(time: 30, unit: 'MINUTES')
          timestamps()
        }

        stages {
            stage('Install Docker-Compose') {
              steps {
                sh 'apk update && apk add docker-compose'
              }
            }
            stage('Git Checkout') {
                steps {
                  git poll: false, url: params.CLONE
                }
            }
            stage('Switch Directory') {
              when  {
                expression { return params.COMPOSE_PATH != 'undefined' }
              }
              steps {
                dir params.COMPOSE_PATH
              }
            }
            stage('Run Compose') {
                steps {
                  sh 'ls -lh'
                  catchError {
                    sh "docker-compose -f ${params.NAME} up -d"
                  }
                }
            }
            stage('Check Healthy state') {
                steps {
                  sh 'docker ps'
                }
            }
            stage('Run conftest') {
                steps {
                  container('conftest') {
                    sh 'conftest --version'
                    git poll: false, url: 'https://github.com/langleu/MA_Infrastructure'
                    sh 'mv conftest/policy policy'
                    sh "conftest test ${params.NAME}"
                  }
                }
            }
            stage('Calculate final score') {
                steps {
                  sh 'echo "hallo"'
                }
            }
            stage('Send feedback') {
                steps {
                  sh 'echo "hallo"'
                }
            }
        }
        post {
          always {
            echo "${currentBuild.currentResult}"
            httpRequesst contentType: "APPLICATION_JSON", httpMode: "POST", requestBody: JsonOutput.toJson(), url: "${BASE_URL}/v1/update"
          }
        }
    }
                  '''.stripIndent())
                sandbox()
            }
        }
    }
