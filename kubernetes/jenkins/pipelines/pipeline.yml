apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-config
  namespace: jenkins
data:
  compose-pipeline.dsl: |
    pipelineJob('compose-pipeline') {
        parameters {
          stringParam('CLONE', '', 'Url of a git repository for cloning (https)')
          stringParam('COMPOSE_PATH', 'undefined', 'Path to the docker-compose file')
          stringParam('NAME', 'docker-compose.yml', 'Name of the docker-compose file')
          stringParam('ID', '', 'Grakn database ID')
          stringParam('RID', '', 'GitHub sha of docker-compose file')
          stringParam('BASE_URL', '', 'URL of the proxy service')
        }

        logRotator {
          numToKeep(100)
        }

        definition {
            cps {
                script('''
    dict = [:]
    score = [:]
    def processVuln() {
      def arr = TRIVY.removeAll([null])
      if (arr) {
        dict['total'] = 0
        dict['score'] = 10
        return true
      }
      TRIVY.each { ele ->
          if (!dict['total']) {
            dict['total'] = ele.vulnerabilities.size()
          } else {
            dict['total'] += ele.vulnerabilities.size()
          }
          if (!dict['score']) {
            dict['score'] = 0
          }
          ele.vulnerabilities.each { vuln ->
            if (vuln.V3Score) {
                dict['score'] += vuln.V3Score
            }
          }
      }
      dict['score'] = (dict['score'] / dict['total']).round(1)
    }
    def generateScore() {
      println dict
      println CONFTEST_RESULT
      println EXECUTABLE
    }
    pipeline {
      agent {
        kubernetes {
          cloud 'kubernetes'
          defaultContainer 'docker'
          yaml """
    kind: Pod
    spec:
      containers:
        - name: docker
          image: docker:19.03.12-dind
          args:
            - --storage-driver=overlay2
          securityContext:
            privileged: true
        - name: conftest
          image: instrumenta/conftest:v0.21.0
          tty: true
          command: ['cat']
        - name: trivy
          image: langleu/trivy:0.11.0
          tty: true
          command: ['cat']
            """
          }
        }

        options {
          timeout(time: 30, unit: 'MINUTES')
          timestamps()
        }

        stages {
            stage('Install Docker-Compose') {
              steps {
                sh 'apk update && apk add docker-compose curl bash'
              }
            }
            stage('Git Checkout') {
                steps {
                  git poll: false, url: params.CLONE
                }
            }
            stage('Switch Directory') {
              when  {
                expression { return params.COMPOSE_PATH != 'undefined' }
              }
              steps {
                dir params.COMPOSE_PATH
              }
            }
            stage('Run Compose') {
                steps {
                 script {
                   EXECUTABLE = true
                  try {
                    sh "docker run -d -p 80:80 nginx:latest"
                    sh "docker run -d node:10"
                    //sh "docker-compose -f ${params.NAME} up -d"
                  } catch(err) {
                      EXECUTABLE = false
                    }
                  }
                }
            }
            stage('Check Healthy state') {
              when  {
                expression { return EXECUTABLE }
              }
              steps {
                script {
                EXECUTABLE = sh (script: """
                  sleep 30s
                  if [[ \\$(docker ps -a | grep -v "CONTAINER ID" | grep -v "Exited (0)" | grep -v "Restarting (0)" | grep -v "Created" | grep -v "Up" | wc -l) -gt 0 ]]
                  then
                    echo false
                  fi
                  """, returnStdout: true)
                }
              }
            }
            stage('Run conftest') {
                steps {
                  sh 'mkdir policy'
                  sh 'curl https://raw.githubusercontent.com/Langleu/MA_Infrastructure/master/conftest/policy/deny.rego > policy/deny.rego'
                  container('conftest') {
                    script {
                      CONFTEST_RESULT = sh(script: "conftest --no-color test --output json ${params.NAME} || true", returnStdout: true).trim()
                    }
                  }
                }
            }
            stage('Run vulnerability scan') {
              steps {
                sh 'curl https://raw.githubusercontent.com/Langleu/MA_Infrastructure/master/kubernetes/jenkins/pipelines/res.tpl > result.tpl'
                script {
                  IMAGES_STRING = sh(script: "docker ps -a --format '{{json .Image}}'", returnStdout: true).trim()
                }
                sh """#!/bin/bash
                    images_string="${IMAGES_STRING}"
                    readarray -t images <<<"\\${images_string}"

                    for image in "\\${images[@]}"
                    do
                      docker save "\\${image}" -o \\${image}.tar || true
                    done
                """
                container('trivy') {
                  sh """#!/bin/bash
                    images_string="${IMAGES_STRING}"
                    readarray -t images <<<"\\${images_string}"

                    echo "[\n" > trivy.json

                    for image in "\\${images[@]}"
                    do
                      trivy image --no-progress --exit-code 0 --format template --template "@result.tpl" -o trivy_temp.json --input \\${image}.tar
                      cat trivy_temp.json >> trivy.json
                      echo "," >> trivy.json
                      rm -rf \\${image}.tar
                    done

                    echo "\n]" >> trivy.json

                  """
                  script {
                    TRIVY = readJSON file: 'trivy.json'
                  }
                }
              }
            }
            stage('Calculate final score') {
                steps {
                  processVuln()
                  generateScore()
                }
            }
            stage('Send feedback') {
                steps {
                  sh 'echo "hallo"'
                }
            }
        }
        post {
          always {
            echo "${currentBuild.currentResult}"
            //httpRequesst contentType: "APPLICATION_JSON", httpMode: "POST", requestBody: JsonOutput.toJson(), url: "${BASE_URL}/v1/update"
          }
        }
    }
                  '''.stripIndent())
                sandbox()
            }
        }
    }
