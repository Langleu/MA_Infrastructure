apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-config
  namespace: jenkins
data:
  compose-pipeline.dsl: |
    pipelineJob('compose-pipeline') {
        definition {
            cps {
                script('''
    pipeline {
      agent {
        kubernetes {
          cloud 'kubernetes'
          defaultContainer 'docker'
          yaml """
    kind: Pod
    spec:
      containers:
        - name: docker
          image: docker:19.03.12-dind
          securityContext:
            privileged: true
        - name: conftest
          image: instrumenta/conftest:v0.21.0
          tty: true
          command: ['cat']
            """
          }
        }

        options {
          timeout(time: 30, unit: 'MINUTES')
          timestamps()
          buildDiscarder(logRotator(numToKeepStr: '1'))
        }

        parameters {
          string(name: 'REPOSITORY', defaultValue: '', description: 'Url of a git repository')
          string(name: 'COMPOSE_PATH', defaultValue: 'undefined', description: 'Path to the docker-compose file')
          string(name: 'COMPOSE_FILENAME', defaultValue: 'docker-compose.yml', description: 'Name of the docker-compose file')
        }

        stages {
            stage('Install Docker-Compose') {
              steps {
                sh 'apk update && apk add docker-compose'
              }
            }
            stage('Git Checkout') {
                steps {
                  git poll: false, url: params.REPOSITORY
                }
            }
            stage('Switch Directory') {
              when  {
                expression { return params.COMPOSE_PATH != 'undefined' }
              }
              steps {
                dir params.COMPOSE_PATH
              }
            }
            stage('Run Compose') {
                steps {
                  sh 'ls -lh'
                  sh "docker-compose -f ${params.COMPOSE_FILENAME} up -d"
                }
            }
            stage('Check Healthy state') {
                steps {
                  sh 'docker ps'
                }
            }
            stage('Run conftest') {
                steps {
                  container('conftest') {
                    sh 'conftest --version'
                  }
                }
            }
            stage('Calculate final score') {
                steps {
                  sh 'echo "hallo"'
                }
            }
            stage('Send feedback') {
                steps {
                  sh 'echo "hallo"'
                }
            }
        }
    }
                  '''.stripIndent())
                sandbox()
            }
        }
    }
